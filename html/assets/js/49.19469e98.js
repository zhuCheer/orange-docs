(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{372:function(t,a,e){"use strict";e.r(a);var s=e(25),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"视图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#视图"}},[t._v("#")]),t._v(" 视图")]),t._v(" "),e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[t._v("Orange 的视图基于官方 "),e("code",[t._v("html/template")]),t._v(" 和 "),e("code",[t._v("text/template")]),t._v(" 包，基本用法也和官方包一致；\n控制器 app.Context 和 view 包进行交互，http 渲染输出由 app.Context 中的方法处理，具体渲染模版替换由 view 包进行处理。")]),t._v(" "),e("h2",{attrs:{id:"模版定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模版定义"}},[t._v("#")]),t._v(" 模版定义")]),t._v(" "),e("p",[t._v("视图包含应用的 HTML，并且将控制器 / 应用程序逻辑与演示逻辑分开。视图文件默认存放于 "),e("code",[t._v("storage/views")]),t._v(" 目录下所有"),e("code",[t._v(".tpl")]),t._v("后缀的文件中，存放目录具体配置可以在 "),e("code",[t._v("config/config/toml")]),t._v(" 中进行调整。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('[app]\n...\nviewPath = "./storage/views"\n')])])]),e("p",[t._v("一个简单的视图如下所示：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\x3c!-- 此视图文件位置： storage/views/hello.tpl --\x3e\n\n<html>\n    <body>\n        <h1>Hello, {{.Name}}</h1>\n    </body>\n</html>\n\n")])])]),e("p",[t._v("在控制器中通过 "),e("code",[t._v("app.Context")]),t._v(" 中的 "),e("code",[t._v("ViewHtml")]),t._v(" 或 "),e("code",[t._v("ViewText")]),t._v(" 方法进行渲染；")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('func ViewShow(c *app.Context) error {\n   showData := struct {\n      Name string\n   }{\n      Name : "world!",\n   }\n   return c.ViewHtml("hello", showData)\n}\n')])])]),e("p",[t._v("当然，视图文件也可以嵌套在 storage/views 目录的子目录中。「点」符号可以用来引用嵌套视图；如果你的视图存储在 storage/views/home/index.tpl，则可以这样引用它：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('return c.ViewHtml("home.index", showData)\n')])])]),e("h2",{attrs:{id:"向视图传递数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#向视图传递数据"}},[t._v("#")]),t._v(" 向视图传递数据")]),t._v(" "),e("p",[t._v("如上述例子所示，你可以使用结构体对象将数据传递到视图：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('return c.ViewHtml("home.index", showData)\n')])])]),e("p",[t._v("此方式传递数据时，作为第二个参数的数据必须是结构体类型或 map[string]interface{} 类型；")]),t._v(" "),e("h2",{attrs:{id:"获取渲染内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取渲染内容"}},[t._v("#")]),t._v(" 获取渲染内容")]),t._v(" "),e("p",[t._v("有些时候我们不想直接输出模板内容，而是希望对内容再进行一些处理后输出，可以直接调用 view 包中的方法获取模板渲染后的内容。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import "gitee.com/zhucheer/orange/view"\n...\ntmpl := view.ContextTmpl(viewName).Assigns(viewData)\nhtmlRes, err := tmpl.Render()\n')])])]),e("p",[t._v("该方法直接获取模版渲染后内容字符串，处理逻辑有可开发人员自行处理，更新灵活。")]),t._v(" "),e("h2",{attrs:{id:"模版引入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模版引入"}},[t._v("#")]),t._v(" 模版引入")]),t._v(" "),e("p",[t._v("有些时候我们在定义模版时有些部分是可以共用的，比如后台中的 header footer 部分模版可以将公共的部分拆分出来定义成一个个单独的模板文件，在需要的地方进行 include 处理；\n完成该功能需要2步：\n1.定义引入模板\n我们拆分出来的模板放到视图目录（views/），如下：\n我们定义一个公用的样式模板，放到 ./views/baseStyle.tpl 下；\n定义引入模版时需要添加 define 标记")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('{{define "baseStyle"}}\n<style>\n    .redTitle{ font-size: 18px; color:#ff0000;}\n</style>\n{{end}}\n')])])]),e("p",[t._v("然后我们在 控制器或中间件中将该模板进行申明：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('func ActionName(c *app.Context) error {\n    c.AddIncludeTmpl("baseStyle")\n}\n')])])]),e("p",[t._v("2.模板引入\n我们在渲染模板时，将该公用的样式引入通过如下标记：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('{{template "baseStyle" .}}\n')])])]),e("h2",{attrs:{id:"模版引擎"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模版引擎"}},[t._v("#")]),t._v(" 模版引擎")]),t._v(" "),e("p",[t._v("模板引擎基于官方包"),e("a",{attrs:{href:"https://studygolang.com/static/pkgdoc/pkg/html_template.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("html/template"),e("OutboundLink")],1),t._v(" 和 "),e("a",{attrs:{href:"https://studygolang.com/static/pkgdoc/pkg/text_template.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("text/template"),e("OutboundLink")],1),t._v(" 语法操作也是一样。")]),t._v(" "),e("h3",{attrs:{id:"变量替换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量替换"}},[t._v("#")]),t._v(" 变量替换")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('func ViewShow(c *app.Context) error {\n   showData := struct {\n      Name string\n   }{\n      Name : "world!",\n   }\n   return c.ViewHtml("hello", showData)\n}\n\n\n...\n视图文件：\n\n<html>\n    <body>\n        <h1>Hello, {{.Name}}</h1>\n    </body>\n</html>\n')])])]),e("p",[t._v("视图文件中的 "),e("code",[t._v("{{")]),t._v(".Name"),e("code",[t._v("}}")]),t._v(" 将会替换成 "),e("code",[t._v("world!")])]),t._v(" "),e("h3",{attrs:{id:"系统变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#系统变量"}},[t._v("#")]),t._v(" 系统变量")]),t._v(" "),e("p",[t._v("目前包如下系统变量：")]),t._v(" "),e("p",[e("code",[t._v("{{")]),t._v(".CSRF_TOKEN"),e("code",[t._v("}}")]),t._v(" 表单提交 csrf_token 数据\n"),e("code",[t._v("{{")]),t._v(".REQUEST_REFERER"),e("code",[t._v("}}")]),t._v(" 页面请求来源数据")]),t._v(" "),e("h3",{attrs:{id:"原样输出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原样输出"}},[t._v("#")]),t._v(" 原样输出")]),t._v(" "),e("p",[e("code",[t._v("ViewHtml")]),t._v(" 方法会对变量中的 html 内容进行转义防止 js 注入等安全问题，如果我们在确保安全的情况下希望原样输出 html 内容，可以使用模版内置函数进行处理；")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<html>\n    <body>\n        <h1>Hello, `{{`.Name | unescaped}}</h1>\n    </body>\n</html>\n")])])]),e("h3",{attrs:{id:"模板注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模板注释"}},[t._v("#")]),t._v(" 模板注释")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{{/* a comment */}}\n注释，执行时会忽略，可以多行；注释不能嵌套，并且必须紧贴分界符始止，就像这里表示的一样。\n")])])]),e("h3",{attrs:{id:"if-条件判断"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#if-条件判断"}},[t._v("#")]),t._v(" if 条件判断")]),t._v(" "),e("p",[t._v("最简单的bool类型和字符串类型的判断")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{{if .condition}}  \n{{end}}  \n")])])]),e("p",[t._v("当.condition为bool类型的时候，则为true表示执行，当.condition为string类型的时候，则非空表示执行。")]),t._v(" "),e("p",[e("strong",[t._v("else if嵌套用法")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{{if .condition1}}  \n{{else if .contition2}}  \n{{end}}\n")])])]),e("p",[e("strong",[t._v("eq 等于")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{{if eq .var1 .var2}}  \n{{end}}\n")])])]),e("p",[e("strong",[t._v("ne 不等于")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{{if ne .var1 .var2}}  \n{{end}}\n")])])]),e("p",[e("strong",[t._v("lt 小于 (less than)")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{{if lt .var1 .var2}}  \n{{end}}\n")])])]),e("p",[e("strong",[t._v("le 小于等于")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{{if le .var1 .var2}}  \n{{end}}\n")])])]),e("p",[e("strong",[t._v("gt 大于")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{{if gt .var1 .var2}}  \n{{end}}\n")])])]),e("p",[e("strong",[t._v("ge 大于等于")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{{if ge .var1 .var2}}  \n{{end}}\n")])])]),e("h3",{attrs:{id:"循环遍历"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环遍历"}},[t._v("#")]),t._v(" 循环遍历")]),t._v(" "),e("p",[t._v("template 还支持 range 循环来遍历 map、slice 内的内容，在模板内定义变量需要加上"),e("code",[t._v("$")]),t._v("符号\n语法为：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{{range $i,$v := .slice}}  \n{{end}}\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('showData := struct {\n   ItemArr  []int\n}{\n   ItemArr:  []int{1, 2, 3, 4, 5},\n}\nreturn c.ViewHtml("home.index", showData)\n...\n<ul>\n{{range $i, $v: = .ItemArr}}\n<li>list item {{$i}}=>{{$v}}</li>\n{{end}}\n</ul>\n')])])])])}),[],!1,null,null,null);a.default=n.exports}}]);