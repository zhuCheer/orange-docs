(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{334:function(t,e,r){t.exports=r.p+"assets/img/pcc.cb07fe26.png"},362:function(t,e,r){"use strict";r.r(e);var n=r(25),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"日志处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#日志处理"}},[t._v("#")]),t._v(" 日志处理")]),t._v(" "),n("p",[t._v("作为一款微服务框架，通过 GRPC 进行方法调用是业界的标配，Orange 框架目前已经支持 GRPC 服务。")]),t._v(" "),n("p",[t._v("框架内置GRPC服务有如下特点：")]),t._v(" "),n("ul",[n("li",[t._v("无需使用者配置额外的 proto 文件；")]),t._v(" "),n("li",[t._v("对现有编写模式无感知，通过配置即可将 HTTP 服务对应的方法复刻到 GRPC；")]),t._v(" "),n("li",[t._v("对与客户端调用也使用 Orange 框架的应用通过内置 GRPC 客户端将和 HTTP 请求一样快速方便的接入 GRPC")])]),t._v(" "),n("h2",{attrs:{id:"原理简述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原理简述"}},[t._v("#")]),t._v(" 原理简述")]),t._v(" "),n("p",[t._v("Orange 框架已经内置了一个通用的 proto 文件，通过该 proto 文件可以满足我们大部分的使用需求，proto 文件详见 "),n("a",{attrs:{href:"https://gitee.com/zhucheer/orange/blob/master/grpc/orange.proto",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitee.com/zhucheer/orange/blob/master/grpc/orange.proto"),n("OutboundLink")],1),t._v("。")]),t._v(" "),n("p",[t._v("我们在使用 GRPC 服务时都是直接使用该 proto 文件生成的方法进行操作，该文件中定义了一个和 HTTP 请求类似的结构，只包含 "),n("code",[t._v("RequestDo")]),t._v(" 一个方法，通过该方法传递请求和返回，平滑的将 HTTP 方法复刻到 GRPC，示意图如下。")]),t._v(" "),n("p",[n("img",{attrs:{src:r(334),alt:""}})]),t._v(" "),n("h2",{attrs:{id:"服务注册"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#服务注册"}},[t._v("#")]),t._v(" 服务注册")]),t._v(" "),n("p",[t._v("启动 GRPC 服务之前需要注册对应的 GRPC 方法，方法注册只需要在路由中定义 GRPC 或 ALL 路由绑定即可，和现有 HTTP 开发模式一样。")]),t._v(" "),n("p",[t._v("下面两种路由绑定方法都能注册到 GRPC 服务。")]),t._v(" "),n("p",[t._v("定义GRPC请求  "),n("code",[t._v('groupName.GRPC("/test", controller.Test)')]),t._v("\n定义所有请求  "),n("code",[t._v('groupName.ALL("/test", controller.Test)')])]),t._v(" "),n("h2",{attrs:{id:"服务启动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#服务启动"}},[t._v("#")]),t._v(" 服务启动")]),t._v(" "),n("p",[t._v("服务启动没有任何改变，配置指定 GPRC 服务端口即可。")]),t._v(" "),n("p",[t._v("设置 GRPC 端口方法一：")]),t._v(" "),n("p",[t._v("修改配置文件 "),n("code",[t._v("app.grpcPort : 8089")])]),t._v(" "),n("p",[t._v("设置 GRPC 端口方法而：")]),t._v(" "),n("p",[t._v("启动程序添加命令行参数  "),n("code",[t._v("--grpc=8089")])]),t._v(" "),n("p",[t._v("配置参数优先级：")]),t._v(" "),n("p",[t._v("命令行参数 > 配置文件")]),t._v(" "),n("h2",{attrs:{id:"客户端调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#客户端调用"}},[t._v("#")]),t._v(" 客户端调用")]),t._v(" "),n("p",[t._v("服务启动后我们就能通过框架内置的通用方法调用 GRPC 服务了，因内置的 proto 和 pb 文件已经生成好，使用框架内置方法也无需过多了解 proto 使用细节，对刚接入 GRPC 的同学非常友好。")]),t._v(" "),n("p",[t._v("依赖包："),n("code",[t._v('"gitee.com/zhucheer/orange/grpc"')])]),t._v(" "),n("p",[t._v("实例化客户端："),n("code",[t._v("grpc.NewClient()")])]),t._v(" "),n("p",[t._v("链式操作设置客户端地址："),n("code",[t._v('SetSrvAddr("127.0.0.1:8089")')])]),t._v(" "),n("p",[t._v("设置超时时间: "),n("code",[t._v("SetTimeout(1)")])]),t._v(" "),n("p",[t._v("请求 GPRC 服务指定绑定的地址："),n("code",[t._v('RunGRPC("/")')]),t._v(" ,其中参数就是服务端再路由注册时填的路径。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// 引入包\nimport (\n\t"gitee.com/zhucheer/orange/grpc"\n)\n\n// 指定 GRPC 服务地址和端口\nresp, err := grpc.NewClient().SetSrvAddr("127.0.0.1:8089").SetTimeout(1).RunGRPC("/")\n')])])]),n("h2",{attrs:{id:"完整的示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#完整的示例"}},[t._v("#")]),t._v(" 完整的示例")]),t._v(" "),n("p",[t._v("该示例将服务端客户端分别放着两个方法里面，启动后通过 访问"),n("code",[t._v("http://127.0.0.1:8088/rpctest")]),t._v(' 后程序回调用自身的 GRPC 服务对应路径为 "/" 的方法，输出 '),n("code",[t._v("Hello world!")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language-golang extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('package main\n\nimport (\n\t"gitee.com/zhucheer/orange/app"\n\t"gitee.com/zhucheer/orange/grpc"\n)\n\nfunc main() {\n\trouter := &Route{}\n\tapp.AppStart(router)\n}\n\ntype Route struct {\n}\n\nfunc (s *Route) ServeMux() {\n\tapp.NewRouter("").GRPC("/", func(ctx *app.Context) error {\n\t\treturn ctx.ToString("Hello world!")\n\t})\n\n\tapp.NewRouter("").GET("/rpctest", func(ctx *app.Context) error {\n\t\tresp, err := grpc.NewClient().SetSrvAddr("127.0.0.1:8089").SetTimeout(1).RunGRPC("/")\n\t\tif err != nil{\n\t\t\treturn ctx.ToString("grpc get respones:" + err.Error())\n\t\t}\n\t\treturn ctx.ToString("grpc get respones:" + resp.String())\n\t})\n}\n\nfunc (s *Route) Register() {\n}\n\n')])])]),n("p",[t._v("服务启动：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 开启go mod")]),t._v("\n$ go mod init\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 先更新框架到master")]),t._v("\n$ go get gitee.com/zhucheer/orange@master\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 启动服务配置 GRPC 端口")]),t._v("\ngo run main.go "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--grpc")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8989")]),t._v("\n\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);